{"version":3,"sources":["Components/ButtonBackToHome.js","Pages/Detail.js","Components/Title.js","Components/SearchForm.js","Components/Movie.js","Components/MoviesList.js","Pages/Home.js","Pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["ButtonBackToHome","className","to","Detail","state","movie","id","fetch","then","res","json","console","log","setState","window","history","back","movieId","this","props","match","params","_fetchMovie","Title","Poster","Actors","Metascore","Plot","src","Component","children","SearchForm","inputMovie","_handleChange","e","target","value","_handleSubmit","preventDefault","results","Search","totalResults","onResults","onSubmit","type","onChange","placeholder","Movie","poster","title","year","div","alt","MoviesList","movies","map","key","imdbID","Year","Home","usedSearch","_handleResults","length","_renderResults","NotFound","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.016d1e66.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport const ButtonBackToHome = () => (\n    <Link className=\"button is-info\"\n        to='/'>\n        Volver a la portada\n    </Link>\n)\n","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { ButtonBackToHome } from '../Components/ButtonBackToHome'\n\nconst API_KEY = 'b2b55f72'\n\nexport class Detail extends Component {\n\n    static propTypes = {\n    match: PropTypes.shape({\n     params: PropTypes.object,\n     isExact: PropTypes.bool,\n     path: PropTypes.string,\n     url: PropTypes.string\n    })\n    };\n\n    state = { movie: {} }\n\n    _fetchMovie({ id }){\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\n        .then(res => res.json())\n        .then(movie => {\n            console.log({movie})\n            this.setState({movie})\n        })\n    }\n\n    _goBack(){\n        window.history.back()\n    }\n\n    componentDidMount() {\n        const { movieId } = this.props.match.params\n        this._fetchMovie({ id: movieId })\n    }\n\n    render() {\n        const { Title, Poster, Actors, Metascore, Plot } = this.state.movie\n        return (\n            <div>\n                <ButtonBackToHome/>\n                <h1>{Title}</h1>\n                <img src={Poster} />\n                <h3>{Actors}</h3>\n                <span>{Metascore}</span>\n                <p>{Plot}</p>\n                <p>Detail</p>\n            </div>\n        );\n    }\n}","import React from \"react\"\n\nexport const Title = ({ children }) => (\n  <h1 className=\"title\">{children}</h1>\n)\n","import React, { Component } from 'react'\n\nconst API_KEY = 'b2b55f72'\n\nexport class SearchForm extends Component {\n\n    state = {\n        inputMovie: ''\n    }\n\n    _handleChange = (e) => {\n        this.setState({ inputMovie: e.target.value })\n    }\n\n    _handleSubmit = (e) => {\n        e.preventDefault()\n        const { inputMovie } = this.state\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\n        .then(res => res.json())\n        .then(results => {\n            const { Search = [], totalResults = '0'} = results\n            //const searchResults = Search || []\n            this.props.onResults(Search)\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this._handleSubmit}>\n                <div className=\"field has-addons\">\n                    <div>\n                        <input className=\"input\"\n                            type=\"text\"\n                            onChange={this._handleChange}\n                            placeholder=\"Movie to search...\"/>                        \n                    </div>\n                    <div className=\"control\">\n                    <button className=\"button is-info\">\n                        Search\n                    </button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport class Movie extends Component {\n\n    static propTypes = {\n        id: PropTypes.string,\n        title: PropTypes.string,\n        year: PropTypes.string,\n        poster: PropTypes.string\n    }\n\n    render() {\n        const { id, poster, title, year } = this.props\n        return (\n          <Link to={`/detail/${id}`} div className=\"card\">\n            <div className=\"card-image\">\n              <figure className=\"image\">\n                <img\n                  src={poster}\n                  alt={title}\n                />\n              </figure>\n            </div>\n            <div className=\"card-content\">\n              <div className=\"media\">\n                <div className=\"media-left\"></div>\n                <div className=\"media-content\">\n                  <p className=\"title is-4\">{title}</p>\n                  <p className=\"subtitle is-6\">{year}</p>\n                </div>\n              </div>\n            </div>\n          </Link>\n        );\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport { Movie } from \"./Movie\";\n\nexport class MoviesList extends Component {\n\n    static propTypes = {\n        movies: PropTypes.array\n    }\n\n    render() {\n        const { movies } = this.props\n        return movies.map(movie =>Â {\n              return (\n                <div className='MoviesList'>\n                    <div key={movie.imdbID} className='MoviesList-item'>\n                        <Movie\n                            id={movie.imdbID}\n                            title={movie.Title}\n                            year={movie.Year}\n                            poster={movie.Poster}>\n                            {movie.Title}\n                        </Movie>\n                </div>\n              </div>\n           )\n        })\n    }\n}","import React, { Component } from 'react';\nimport { Title } from '../Components/Title'\nimport { SearchForm }from '../Components/SearchForm'\nimport { MoviesList } from '../Components/MoviesList'\n\nexport class Home extends Component {\n\n    state = { usedSearch: false, results: [] }\n\n    _handleResults = (results) => {\n    this.setState({ results, usedSearch: true })\n    }\n\n    _renderResults(){\n    return this.state.results.length === 0\n    ? <p>Sorry! Results not found</p>\n    : <MoviesList movies={this.state.results}/>\n    }\n\n    render() {\n        return (\n            <div>\n            <Title>Search Movies</Title>\n            <div className='SearchForm-wrapper'>\n                <SearchForm onResults={this._handleResults}/>\n            </div>\n            {\n                this.state.usedSearch\n                ? this._renderResults()\n                : <small> Use the form to search a movie </small>\n            }\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { ButtonBackToHome } from '../Components/ButtonBackToHome'\n\nexport const NotFound = () => {\n    return (\n        <div>\n            <h1 className='title'>404!</h1>\n            <h2 className='subtitle'>No existe la pagina</h2>\n            <ButtonBackToHome/>\n        </div>\n    );\n};","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { Detail } from './Pages/Detail'\nimport { Home } from './Pages/Home'\nimport { NotFound } from './Pages/NotFound'\n\nimport './App.css';\nimport 'bulma/css/bulma.css'\n\nclass App extends Component {\n  render (){\n    return(\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/detail/:movieId' component={Detail} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}